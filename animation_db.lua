---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 7/20/2023 6:26 PM
---

require('util')
local AnimationDB = {}

--- Naming convention EntityType_Name. EntityType follows the graphics folder structure.
--- e.g [unit][zergling], [building][hive], [projectiles][spore], etc
---
--- death and projectile are handled differently because they are mostly single layer animation.
AnimationDB.data = {
    buildings = {

    },
    death = require('__erm_terran_hd_assets__/db/death'),
    projectiles = require('__erm_terran_hd_assets__/db/projectiles'),
    units = {
        battlecruiser = require('__erm_terran_hd_assets__/db/units/battlecruiser'),
        dropship = require('__erm_terran_hd_assets__/db/units/dropship'),
        firebat = require('__erm_terran_hd_assets__/db/units/firebat'),
        ghost = require('__erm_terran_hd_assets__/db/units/ghost'),
        goliath = require('__erm_terran_hd_assets__/db/units/goliath'),
        marine = require('__erm_terran_hd_assets__/db/units/marine'),
        medic = require('__erm_terran_hd_assets__/db/units/medic'),
        science_vessel = require('__erm_terran_hd_assets__/db/units/science_vessel'),
        scv = require('__erm_terran_hd_assets__/db/units/scv'),
        siege_tank = require('__erm_terran_hd_assets__/db/units/siege_tank'),
        spidermine = require('__erm_terran_hd_assets__/db/units/spidermine'),
        valkyrie = require('__erm_terran_hd_assets__/db/units/valkyrie'),
        vulture = require('__erm_terran_hd_assets__/db/units/vulture'),
        wraith = require('__erm_terran_hd_assets__/db/units/wraith'),
    }

}






---
--- Construct basic layered animations
---
function AnimationDB.get_layered_animations(entity_type, name, animation_type, unit_scale)
    return {
        layers = {
            AnimationDB.get_main_animation(entity_type, name, animation_type, unit_scale),
            AnimationDB.get_shadow_animation(entity_type, name, animation_type, unit_scale),
            AnimationDB.get_team_mask_animation(entity_type, name, animation_type, unit_scale),
            AnimationDB.get_glow_mask_animation(entity_type, name, animation_type, unit_scale),
            AnimationDB.get_effect_mask_animation(entity_type, name, animation_type, unit_scale),
            AnimationDB.get_light_mask_animation(entity_type, name, animation_type, unit_scale),
        }
    }
end

---
--- get single sprite animation
---
function AnimationDB.get_single_animation(entity_type, name, animation_type, unit_scale)
    local animation = AnimationDB.get_main_animation(entity_type, name, animation_type, unit_scale)
    return animation
end

function AnimationDB.get_main_animation(entity_type, name, animation_type, unit_scale)
    local animation = util.table.deepcopy(AnimationDB.data[entity_type][name][animation_type]['main'])
    if unit_scale then
        animation.unit_scale = unit_scale
    end
    return animation
end

function AnimationDB.get_shadow_animation(entity_type, name, animation_type, unit_scale)
    if AnimationDB.data[entity_type][name][animation_type]['shadow'] then
        local animation = AnimationDB.get_main_animation(entity_type, name, animation_type, unit_scale)
        animation['draw_as_shadow'] = true
        animation['shift'] = util.table.deepcopy(AnimationDB.data[entity_type][name][animation_type]['shadow']['shift'])
        return animation
    end
end

---
--- Return glow mask
---
function AnimationDB.get_glow_mask_animation(entity_type, name, animation_type, unit_scale)
    if AnimationDB.data[entity_type][name][animation_type]['glow'] then
        local animation = util.table.deepcopy(AnimationDB.data[entity_type][name][animation_type]['glow'])
        animation['draw_as_glow'] = true
        if unit_scale then
            animation.unit_scale = unit_scale
        end
        return animation
    end
end

---
--- Return effect mask
---
function AnimationDB.get_effect_mask_animation(entity_type, name, animation_type, unit_scale)
    if AnimationDB.data[entity_type][name][animation_type]['effect'] then
        local animation = util.table.deepcopy(AnimationDB.data[entity_type][name][animation_type]['effect'])
        if unit_scale then
            animation.unit_scale = unit_scale
        end
        return animation
    end
end

---
--- Return draw_as_light mask
---
function AnimationDB.get_light_mask_animation(entity_type, name, animation_type, unit_scale)
    if AnimationDB.data[entity_type][name][animation_type]['light'] then
        local animation = util.table.deepcopy(AnimationDB.data[entity_type][name][animation_type]['light'])
        if unit_scale then
            animation.unit_scale = unit_scale
        end
        animation['draw_as_light'] = true
        return animation
    end
end

---
--- Return color mask for team colors
---
function AnimationDB.get_team_mask_animation(entity_type, name, animation_type, unit_scale)
    if AnimationDB.data[entity_type][name][animation_type]['team'] then
        local animation = util.table.deepcopy(AnimationDB.data[entity_type][name][animation_type]['team'])
        if unit_scale then
            animation.unit_scale = unit_scale
        end
        return animation
    end
end

function AnimationDB.alter_team_color(animation_data, color, disable_mask, preserve_gloss)
    if animation_data['layers'] then
        for index, animation_node in pairs(animation_data['layers']) do
            if (animation_node.filename and string.find( animation_node.filename, '_teamcolour') ~= nil) or
                    (animation_node.filenames and string.find( animation_node.filenames[1], '_teamcolour') ~= nil) then
                if disable_mask then
                    animation_data['layers'][index] = nil
                else
                    animation_data['layers'][index]['tint'] = color
                    if preserve_gloss then
                        animation_data['layers'][index]['blend_mode'] = 'additive-soft'
                    end
                end
            end
        end
    end

    return animation_data
end

function AnimationDB.change_animation_speed(animation_data, speed)
    if animation_data['layers'] then
        for index, animation_node in pairs(animation_data['layers']) do
            if (animation_node.filename and string.find( animation_node.filename, '_teamcolour') ~= nil) or
                    (animation_node.filenames and string.find( animation_node.filenames[1], '_teamcolour') ~= nil) then
                animation_data['layers'][index]['animation_speed'] = speed
            end
        end
    elseif animation_data['animation_speed'] then
        animation_data['animation_speed'] = speed
    end

    return animation_data
end

return AnimationDB